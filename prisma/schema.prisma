generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth Models

enum Role {
  ADMIN
  OPERATOR
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  role       Role      @default(OPERATOR)
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// App Models

enum AssetType {
  PRINTER
  //COMPUTER
  //SWITCH
}

enum AssetStatus {
  USING
  STOCK
  BROKEN
  MAINTENANCE
  RESERVED
}

model Asset {
  id        String      @id @default(cuid())
  tag       String      @unique
  assetType AssetType   @map("asset_type")
  status    AssetStatus
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  sector   Sector @relation(fields: [sectorId], references: [id])
  sectorId String @map("sector_id")

  printer Printer?

  @@map("asset")
}

model Printer {
  id           String   @id @default(cuid())
  serialNumber String   @map("serial_number")
  ipAddress    String   @map("ip_address")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  printerModel   PrinterModel @relation(fields: [printerModelId], references: [id])
  printerModelId String       @map("printer_model_id")

  asset   Asset  @relation(fields: [assetId], references: [id])
  assetId String @unique

  @@map("printer")
}

model PrinterModel {
  id        String   @id @default(cuid())
  name      String
  toners    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  printers Printer[]

  @@map("printer_model")
}

model Department {
  id           String   @id @default(cuid())
  name         String
  manager      String
  managerEmail String   @map("manager_email")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  sectors Sector[]

  @@map("department")
}

model Sector {
  id           String   @id @default(cuid())
  name         String
  manager      String
  managerEmail String   @map("manager_email")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String     @map("department_id")

  assets Asset[]

  @@map("sector")
}
